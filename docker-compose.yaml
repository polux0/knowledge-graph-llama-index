version: "3.9"

services:
  metad0:
    image: docker.io/vesoft/nebula-metad:latest
    environment:
      USER: root
    command:
      - --meta_server_addrs=metad0:9559
      - --local_ip=metad0
      - --ws_ip=metad0
      - --port=9559
      - --ws_http_port=19559
      - --data_path=/data/meta
      - --log_dir=/logs
      - --v=0
      - --minloglevel=0
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://metad0:19559/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    ports:
      - 9559:9559
      - 19559:19559
      - 19560
    volumes:
      - $HOME/nebula/data/meta0:/data/meta
      - $HOME/nebula/logs/meta0:/logs
    networks:
      - net
    restart: on-failure
    cap_add:
      - SYS_PTRACE

  storaged0:
    image: docker.io/vesoft/nebula-storaged:latest
    environment:
      USER: root
      TZ: "${TZ}"
    command:
      - --meta_server_addrs=metad0:9559
      - --local_ip=storaged0
      - --ws_ip=storaged0
      - --port=9779
      - --ws_http_port=19779
      - --data_path=/data/storage
      - --log_dir=/logs
      - --v=0
      - --minloglevel=0
    depends_on:
      - metad0
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://storaged0:19779/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    ports:
      - 9779:9779
      - 19779:19779
      - 19780
    volumes:
      - $HOME/nebula/data/storage0:/data/storage
      - $HOME/nebula/logs/storage0:/logs
    networks:
      - net
    restart: on-failure
    cap_add:
      - SYS_PTRACE

  graphd:
    image: docker.io/vesoft/nebula-graphd:latest
    environment:
      USER: root
      TZ: "${TZ}"
    command:
      - --meta_server_addrs=metad0:9559
      - --port=9669
      - --local_ip=graphd
      - --ws_ip=graphd
      - --ws_http_port=19669
      - --log_dir=/logs
      - --v=0
      - --minloglevel=0
    depends_on:
      - storaged0
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://graphd:19669/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    ports:
      - 9669:9669
      - 19669:19669
      - 19670
    volumes:
      - $HOME/nebula/logs/graph:/logs
    networks:
      - net
    restart: on-failure
    cap_add:
      - SYS_PTRACE
  console:
    image: docker.io/vesoft/nebula-console:latest
    entrypoint: ""
    command:
      - sh
      - -c
      - |
        for i in `seq 1 60`;do
          var=`nebula-console -addr graphd -port 9669 -u root -p nebula -e 'ADD HOSTS "storaged0":9779'`;
          if [[ $$? == 0 ]];then
            break;
          fi;
          sleep 1;
          echo "retry to add hosts.";
        done && tail -f /dev/null;

    depends_on:
      - graphd
    networks:
      - net
  nebula-web-docker:
    image: vesoft/nebula-graph-studio:latest
    environment:
      - NG_SEVER_ROOT_USER=root
      - NG_SEVER_ROOT_PASSWORD=nebula
      - NG_SERVER_BASE_URL=http://graphd:9669
    ports:
      - "7001:7001" # Port for web interface
    depends_on:
      - graphd
    networks:
      - net

  chromadb:
    image: server
    container_name: chromadb_container
    build:
      context: ./chromadb
      dockerfile: Dockerfile
    volumes:
      # - $HOME/chroma-data:/chroma/chroma
      - chroma-data:/chroma/chroma
    command: "--workers 1 --host 0.0.0.0 --port 8000 --proxy-headers --log-config ./log_config.yml --timeout-keep-alive 30"
    environment:
      - IS_PERSISTENT=TRUE
      - CHROMA_SERVER_AUTH_PROVIDER=${CHROMA_SERVER_AUTH_PROVIDER}
      - CHROMA_SERVER_AUTH_CREDENTIALS_FILE=${CHROMA_SERVER_AUTH_CREDENTIALS_FILE}
      - CHROMA_SERVER_AUTH_CREDENTIALS=${CHROMA_SERVER_AUTH_CREDENTIALS}
      - CHROMA_SERVER_AUTH_CREDENTIALS_PROVIDER=${CHROMA_SERVER_AUTH_CREDENTIALS_PROVIDER}
      - CHROMA_SERVER_AUTH_TOKEN_TRANSPORT_HEADER=${CHROMA_SERVER_AUTH_TOKEN_TRANSPORT_HEADER}
      - PERSIST_DIRECTORY=${PERSIST_DIRECTORY:-/chroma/chroma}
      - CHROMA_OTEL_EXPORTER_ENDPOINT=${CHROMA_OTEL_EXPORTER_ENDPOINT}
      - CHROMA_OTEL_EXPORTER_HEADERS=${CHROMA_OTEL_EXPORTER_HEADERS}
      - CHROMA_OTEL_SERVICE_NAME=${CHROMA_OTEL_SERVICE_NAME}
      - CHROMA_OTEL_GRANULARITY=${CHROMA_OTEL_GRANULARITY}
      - CHROMA_SERVER_NOFILE=${CHROMA_SERVER_NOFILE}
    restart: unless-stopped
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - net
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      # Ensure this matches the mounted volume path inside the container
      - path.repo=/usr/share/elasticsearch/snapshots
    ports:
      - "9200:9200"
    volumes:
      - $HOME/esdata1:/usr/share/elasticsearch/data
      # This line mounts $HOME/es_snapshots to /usr/share/elasticsearch/snapshots inside the container
      - $HOME/es_snapshots:/usr/share/elasticsearch/snapshots
    networks:
      - net
  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.1
    container_name: kibana
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    networks:
      - net
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      XPACK_SECURITY_ENABLED: "false"
  redis:
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - $HOME/redis/d–∞ta:/root/redis
      - $HOME/redis/redis.conf:/usr/local/etc/redis/redis.conf
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DATABASES=1
    networks:
      - net
  app:
    build: .
    depends_on:
      graphd:
        condition: service_healthy
      metad0:
        condition: service_healthy
      chromadb:
        condition: service_healthy
    container_name: app_container
    volumes:
      - .:/usr/src/app
    ports:
      - "8080:8080"
      - "8501:8501"
    environment:
      - HUGGING_FACE_API_KEY=${HUGGING_FACE_API_KEY}
      - NEO4J_USERNAME=${NEO4J_USERNAME}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - NEO4J_URL=${NEO4J_URL}
      - NEO4J_DATABASE=${NEO4J_DATABASE}
    # restart: always
    restart: on-failure
    command: streamlit run ./modules/app.py
    # command: python ./modules/create_vector_embeddings_llama.py
    # command: python ./modules/multi_representation_indexing.py
    # command: python ./modules/create_raptor_indexing.py
    # command: python ./modules/delete_chroma_collections.py
    # command: python ./modules/create_knowledge_graph.py
    networks:
      - net

volumes:
  chroma-data:
    driver: local

networks:
  net:
    driver: bridge
