version: "3.9"

services:
  chromadb:
    image: server
    container_name: chromadb_container
    build:
      context: ./chromadb
      dockerfile: Dockerfile
    volumes:
      - chroma-data:/chroma/chroma
    command: "--workers 1 --host 0.0.0.0 --port 8000 --proxy-headers --log-config ./log_config.yml --timeout-keep-alive 30"
    environment:
      - IS_PERSISTENT=TRUE
      - CHROMA_SERVER_AUTH_PROVIDER=${CHROMA_SERVER_AUTH_PROVIDER}
      - CHROMA_SERVER_AUTH_CREDENTIALS_FILE=${CHROMA_SERVER_AUTH_CREDENTIALS_FILE}
      - CHROMA_SERVER_AUTH_CREDENTIALS=${CHROMA_SERVER_AUTH_CREDENTIALS}
      - CHROMA_SERVER_AUTH_CREDENTIALS_PROVIDER=${CHROMA_SERVER_AUTH_CREDENTIALS_PROVIDER}
      - CHROMA_SERVER_AUTH_TOKEN_TRANSPORT_HEADER=${CHROMA_SERVER_AUTH_TOKEN_TRANSPORT_HEADER}
      - PERSIST_DIRECTORY=${PERSIST_DIRECTORY:-/chroma/chroma}
      - CHROMA_OTEL_EXPORTER_ENDPOINT=${CHROMA_OTEL_EXPORTER_ENDPOINT}
      - CHROMA_OTEL_EXPORTER_HEADERS=${CHROMA_OTEL_EXPORTER_HEADERS}
      - CHROMA_OTEL_SERVICE_NAME=${CHROMA_OTEL_SERVICE_NAME}
      - CHROMA_OTEL_GRANULARITY=${CHROMA_OTEL_GRANULARITY}
      - CHROMA_SERVER_NOFILE=${CHROMA_SERVER_NOFILE}
    restart: unless-stopped
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - net
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - path.repo=/usr/share/elasticsearch/snapshots
    ports:
      - "9200:9200"
    volumes:
      - $HOME/esdata1:/usr/share/elasticsearch/data
      - $HOME/es_snapshots:/usr/share/elasticsearch/snapshots
    networks:
      - net
  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.1
    container_name: kibana
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    networks:
      - net
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      XPACK_SECURITY_ENABLED: "false"
  redis:
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - $HOME/redis/data:/data
      - $HOME/redis/redis.conf:/usr/local/etc/redis/redis.conf
      - $HOME/redis_acls/users.acl:/usr/local/etc/redis/users.acl
    environment:
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DATABASES=1
    command:
      [
        "redis-server",
        "/usr/local/etc/redis/redis.conf",
        "--requirepass",
        "${REDIS_PASSWORD}",
      ]
    networks:
      - net
  # app:
  #   build: .
  #   depends_on:
  #     chromadb:
  #       condition: service_healthy
  #   container_name: app_container
  #   volumes:
  #     - .:/usr/src/app
  #   ports:
  #     - "8080:8080"
  #     - "8501:8501"
  #   env_file:
  #     - .env.ui.production
  #   environment:
  #   - ENVIRONMENT=production
  #   # command: python ./modules/create_vector_embeddings_llama.py
  #   # command: python ./modules/multi_representation_indexing.py
  #   # command: python ./modules/create_raptor_indexing_langchain.py
  #   command: streamlit run ./modules/app.py
  #   # command: python ./modules/delete_chroma_collections.py
  #   # command: python ./modules/create_knowledge_graph.py
  #   networks:
  #     - net
  # Introducing langfuse
  langfuse:
    image: langfuse/langfuse:latest
    container_name: langfuse
    env_file:
      - .env.api.production
    ports:
      - "3000:3000"
    depends_on:
      - postgres
    restart: always
    networks:
      - net
  # Langfuse depends on postgres
  postgres:
    image: postgres:13
    container_name: langfuse_postgres
    env_file:
      - .env.production
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    networks:
      - net
  api:
    build: .
    container_name: api_container
    volumes:
      - .:/usr/src/app
    ports:
      - "5000:5000"
    env_file:
      - .env.api.production
    environment:
      - SERVICE_TYPE=api
      - ENVIRONMENT=production
    command: python ./modules/api.py
    networks:
      - net
  telegram_bot:
    build: .
    container_name: telegram_bot_container
    volumes:
      - .:/usr/src/app
    env_file:
      - .env.production
    environment:
      - ENVIRONMENT=production
    command: python ./modules/telegram_bot.py
    networks:
      - net
volumes:
  chroma-data:
    driver: local
  postgres_data:

networks:
  net:
    driver: bridge
