name: Deploy to Digital Ocean

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Create .env file on server
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ secrets.DROPLET_IP_ADDRESS }} << 'EOF'

          # Ensure required directories exist and set permissions
          mkdir -p /usr/share/snapshots/elasticsearch $HOME/es_snapshots/ $HOME/neo4j/data $HOME/neo4j/logs $HOME/neo4j/import $HOME/neo4j/plugins $HOME/chroma-data $HOME/esdata1
          # Set permissions for Elasticsearch snapshots
          chmod -R 777 /usr/share/snapshots/elasticsearch $HOME/es_snapshots
          # chown -R root:root $HOME/elasticsearch/snapshots $HOME/neo4j $HOME/chroma-data $HOME/esdata1
          chown -R 1000:1000 $HOME/es_snapshots $HOME/neo4j $HOME/chroma-data $HOME/esdata1

          # Make snapshot scripts executable
          chmod +x ./scripts/elasticsearch/create_snapshot.sh ./scripts/elasticsearch/setup_repository.sh ./scripts/elasticsearch/create_snapshot_with_cleanup.sh ./scripts/elasticsearch/restore_from_a_snapshot.sh

          cat <<EOT > /home/auravana/app/.env
          HUGGING_FACE_API_KEY=${{ secrets.HUGGING_FACE_API_KEY }}
          HUGGING_FACE_API_KEY_ANOTHER=${{ secrets.HUGGING_FACE_API_KEY_ANOTHER }}
          NEO4J_DATABASE=${{ secrets.NEO4J_DATABASE }}
          NEO4J_PASSWORD=${{ secrets.NEO4J_PASSWORD }}
          NEO4J_URL=${{ secrets.NEO4J_URL }}
          NEO4J_USERNAME=${{ secrets.NEO4J_USERNAME }}
          OPENAI_API_KEY=${{secrets.OPENAI_API_KEY}}
          CHROMA_URL=${{ secrets.CHROMA_URL }}
          CHROMA_PORT=${{secrets.CHROMA_PORT}}
          ELASTIC_SCHEME=${{secrets.ELASTIC_SCHEME}}
          ELASTIC_URL=${{ secrets.ELASTIC_URL }}
          ELASTIC_PORT=${{secrets.ELASTIC_PORT}}
          EOT
          EOF
        continue-on-error: true

      - name: Deploy to Digital Ocean
        run: |
          ssh -v -o StrictHostKeyChecking=no root@${{ secrets.DROPLET_IP_ADDRESS }} << 'EOF'
            export HUGGING_FACE_API_KEY=${{ secrets.HUGGING_FACE_API_KEY }}
            export HUGGING_FACE_API_KEY_ANOTHER=${{ secrets.HUGGING_FACE_API_KEY_ANOTHER }}
            export NEO4J_DATABASE=${{ secrets.NEO4J_DATABASE }}
            export NEO4J_PASSWORD=${{ secrets.NEO4J_PASSWORD }}
            export NEO4J_URL=${{ secrets.NEO4J_URL }}
            export NEO4J_USERNAME=${{ secrets.NEO4J_USERNAME }}
            export OPENAI_API_KEY=${{secrets.OPENAI_API_KEY}}
            export CHROMA_URL=${{ secrets.CHROMA_URL }}
            export CHROMA_PORT=${{secrets.CHROMA_PORT}}
            export ELASTIC_SCHEME=${{secrets.ELASTIC_SCHEME}}
            export ELASTIC_URL=${{ secrets.ELASTIC_URL }}
            export ELASTIC_PORT=${{secrets.ELASTIC_PORT}}
            if [ ! -d "/home/auravana/app" ]; then
              # Clone the repository if the directory doesn't exist
              git clone https://github.com/polux0/knowledge-graph-llama-index /home/auravana/app
            else
              # Pull the latest changes if the repository is already cloned
              cd /home/auravana/app
              git pull
            fi
            cd /home/auravana/app
            docker-compose down && docker-compose up --build -d
          EOF

      - name: Deploy to Digital Ocean and set up cron job for Elasticsearch snapshots
        run: |
          ssh -v -o StrictHostKeyChecking=no root@${{ secrets.DROPLET_IP_ADDRESS }} << 'EOF'
            # Setup repository for elasticsearch snapshots
            ./scripts/elasticsearch/setup_repository.sh
            # Set up cron job to create Elasticsearch snapshots every hour
            # Check if the cron job already exists, and append it if it doesn't
            CRON_JOB="0 * * * * /home/auravana/app/scripts/elasticsearch/create_snapshot_with_cleanup.sh"
            crontab -l | grep -Fq "\$CRON_JOB" || (crontab -l; echo "\$CRON_JOB") | crontab 
          EOF

      - name: Set up Elasticsearch Schema
        run: |
          ssh -v -o StrictHostKeyChecking=no root@${{ secrets.DROPLET_IP_ADDRESS }} << 'EOF'
            if [ -f /home/auravana/app/scripts/elasticsearch/setup.sh ]; then
                chmod +x /home/auravana/app/scripts/elasticsearch/setup.sh
                /home/auravana/app/scripts/elasticsearch/setup.sh
            else
                echo "Elasticsearch setup.sh script not found"
                exit 1
            fi
          EOF

        