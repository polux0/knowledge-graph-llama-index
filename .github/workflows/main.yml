name: Deploy to Digital Ocean

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Create .env files on server
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ secrets.DROPLET_IP_ADDRESS }} << 'EOF'
          # Ensure required directories exist and set permissions
          mkdir -p /usr/share/snapshots/elasticsearch $HOME/es_snapshots/ $HOME/neo4j/data $HOME/neo4j/logs $HOME/neo4j/import $HOME/neo4j/plugins $HOME/chroma-data $HOME/esdata1 $HOME/redis $HOME/redis/data $HOME/nebula/data/meta0 $HOME/nebula/logs/meta0 $HOME/nebula/data/storage0 $HOME/nebula/logs/storage0 $HOME/nebula/logs/graph
          # Set permissions for Elasticsearch snapshots
          chmod -R 777 /usr/share/snapshots/elasticsearch $HOME/es_snapshots $HOME/redis $HOME/redis/data
          # chown -R root:root $HOME/elasticsearch/snapshots $HOME/neo4j $HOME/chroma-data $HOME/esdata1 $HOME/redis $HOME/redis/data $HOME/nebula
          chown -R 1000:1000 $HOME/es_snapshots $HOME/neo4j $HOME/chroma-data $HOME/esdata1 $HOME/redis $HOME/redis/data $HOME/nebula
          # Make snapshot scripts executable
          chmod +x /home/auravana/app/scripts/elasticsearch/create_snapshot.sh /home/auravana/app/scripts/elasticsearch/setup_repository.sh /home/auravana/app/scripts/elasticsearch/create_snapshot_with_cleanup.sh /home/auravana/app/scripts/elasticsearch/restore_from_a_snapshot.sh
          EOF
        continue-on-error: true

      - name: Deploy to Digital Ocean
        run: |
          ssh -v -o StrictHostKeyChecking=no root@${{ secrets.DROPLET_IP_ADDRESS }} << 'EOF'
            export HUGGING_FACE_INFERENCE_ENDPOINT=${{ secrets.HUGGING_FACE_INFERENCE_ENDPOINT }}
            export HUGGING_FACE_API_KEY=${{ secrets.HUGGING_FACE_API_KEY }}
            export NEO4J_USERNAME=${{ secrets.NEO4J_USERNAME }}
            export NEO4J_PASSWORD=${{ secrets.NEO4J_PASSWORD }}
            export NEO4J_URL=${{ secrets.NEO4J_URL }}
            export NEO4J_DATABASE=${{ secrets.NEO4J_DATABASE }}
            export CHROMA_URL=${{ secrets.CHROMA_URL }}
            export CHROMA_PORT=${{ secrets.CHROMA_PORT }}
            export ELASTIC_SCHEME=${{ secrets.ELASTIC_SCHEME }}
            export ELASTIC_URL=${{ secrets.ELASTIC_URL }}
            export ELASTIC_PORT=${{ secrets.ELASTIC_PORT }}
            export OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            export NEBULA_URL=${{ secrets.NEBULA_URL }}
            export NEBULA_PORT=${{ secrets.NEBULA_PORT }}
            export NEBULA_USERNAME=${{ secrets.NEBULA_USERNAME }}
            export NEBULA_PASSWORD=${{ secrets.NEBULA_PASSWORD }}
            export REDIS_HOST=${{ secrets.REDIS_HOST }}
            export REDIS_PORT=${{ secrets.REDIS_PORT }}
            export REDIS_USERNAME1=${{ secrets.REDIS_USERNAME1 }}
            export REDIS_PASSWORD1=${{ secrets.REDIS_PASSWORD1 }}
            export REDIS_USERNAME2=${{ secrets.REDIS_USERNAME2 }}
            export REDIS_PASSWORD2=${{ secrets.REDIS_PASSWORD2 }}
            export COHERE_API_KEY=${{ secrets.COHERE_API_KEY }}
            export ENV=${{ secrets.ENV }}
            export TELEGRAM_DEVELOPMENT_INTEGRATION_TOKEN=${{ secrets.TELEGRAM_DEVELOPMENT_INTEGRATION_TOKEN }}
            export API_URL=${{ secrets.API_URL }}
            export GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}
            # Delete the directory if it exists and clone the repository anew
            if [ -d "/home/auravana/app" ]; then
              rm -rf /home/auravana/app
            fi
            git clone https://github.com/polux0/knowledge-graph-llama-index /home/auravana/app
            cd /home/auravana/app

            cat <<EOT > .env.production
          HUGGING_FACE_INFERENCE_ENDPOINT=${HUGGING_FACE_INFERENCE_ENDPOINT}
          HUGGING_FACE_API_KEY=${HUGGING_FACE_API_KEY}
          NEO4J_USERNAME=${NEO4J_DATABASE}
          NEO4J_PASSWORD=${NEO4J_PASSWORD}
          NEO4J_URL=${NEO4J_URL}
          NEO4J_DATABASE=${NEO4J_USERNAME}
          CHROMA_URL=${CHROMA_URL}
          CHROMA_PORT=${CHROMA_PORT}
          ELASTIC_SCHEME=${ELASTIC_SCHEME}
          ELASTIC_URL=${ELASTIC_URL}
          ELASTIC_PORT=${ELASTIC_PORT}
          OPENAI_API_KEY=${OPENAI_API_KEY}
          NEBULA_URL=${NEBULA_URL}
          NEBULA_PORT=${NEBULA_PORT}
          NEBULA_USERNAME=${NEBULA_USERNAME}
          NEBULA_PASSWORD=${NEBULA_PASSWORD}
          REDIS_HOST=${REDIS_HOST}
          REDIS_PORT=${REDIS_PORT}
          REDIS_USERNAME=${REDIS_USERNAME1}
          REDIS_PASSWORD=${REDIS_PASSWORD1}
          COHERE_API_KEY=${COHERE_API_KEY}
          ENV=${ENV}
          TELEGRAM_DEVELOPMENT_INTEGRATION_TOKEN=${TELEGRAM_DEVELOPMENT_INTEGRATION_TOKEN}
          API_URL=${API_URL}
          GROQ_API_KEY=${GROQ_API_KEY}
          EOT

            cat <<EOT > .env.api.production
          HUGGING_FACE_INFERENCE_ENDPOINT=${HUGGING_FACE_INFERENCE_ENDPOINT}
          HUGGING_FACE_API_KEY=${HUGGING_FACE_API_KEY}
          NEO4J_USERNAME=${NEO4J_DATABASE}
          NEO4J_PASSWORD=${NEO4J_PASSWORD}
          NEO4J_URL=${NEO4J_URL}
          NEO4J_DATABASE=${NEO4J_USERNAME}
          CHROMA_URL=${CHROMA_URL}
          CHROMA_PORT=${CHROMA_PORT}
          ELASTIC_SCHEME=${ELASTIC_SCHEME}
          ELASTIC_URL=${ELASTIC_URL}
          ELASTIC_PORT=${ELASTIC_PORT}
          OPENAI_API_KEY=${OPENAI_API_KEY}
          NEBULA_URL=${NEBULA_URL}
          NEBULA_PORT=${NEBULA_PORT}
          NEBULA_USERNAME=${NEBULA_USERNAME}
          NEBULA_PASSWORD=${NEBULA_PASSWORD}
          REDIS_HOST=${REDIS_HOST}
          REDIS_PORT=${REDIS_PORT}
          REDIS_USERNAME=${REDIS_USERNAME2}
          REDIS_PASSWORD=${REDIS_PASSWORD2}
          COHERE_API_KEY=${COHERE_API_KEY}
          ENV=${ENV}
          TELEGRAM_DEVELOPMENT_INTEGRATION_TOKEN=${TELEGRAM_DEVELOPMENT_INTEGRATION_TOKEN}
          API_URL=${API_URL}
          GROQ_API_KEY=${GROQ_API_KEY}
          EOT

            # Start Docker containers
            docker-compose down && docker-compose up --build -d
          EOF

      - name: Deploy to Digital Ocean and set up cron job for Elasticsearch snapshots
        run: |
          ssh -v -o StrictHostKeyChecking=no root@${{ secrets.DROPLET_IP_ADDRESS }} << 'EOF'
            # Setup repository for elasticsearch snapshots
            ./scripts/elasticsearch/setup_repository.sh
            # Remove existing cron jobs
            crontab -r || true
            # Set up cron job to create Elasticsearch snapshots every hour
            CRON_JOB="0 * * * * /home/auravana/app/scripts/elasticsearch/create_snapshot_with_cleanup.sh"
            echo "$CRON_JOB" | crontab -
          EOF

      - name: Set up Elasticsearch Schema
        run: |
          ssh -v -o StrictHostKeyChecking=no root@${{ secrets.DROPLET_IP_ADDRESS }} << 'EOF'
            if [ -f /home/auravana/app/scripts/elasticsearch/setup.sh ] && \
                [ -f /home/auravana/app/scripts/elasticsearch/migrations/01_add_source_agent_into_interaction.sh ] && \
                [ -f /home/auravana/app/scripts/elasticsearch/migrations/02_add_retrieved_nodes_into_interaction.sh ] && \
                [ -f /home/auravana/app/scripts/elasticsearch/migrations/03_add_telegram_related_data_into_interaction.sh ]; then
                chmod +x /home/auravana/app/scripts/elasticsearch/setup.sh
                /home/auravana/app/scripts/elasticsearch/setup.sh
                chmod +x /home/auravana/app/scripts/elasticsearch/migrations/01_add_source_agent_into_interaction.sh
                /home/auravana/app/scripts/elasticsearch/migrations/01_add_source_agent_into_interaction.sh
                chmod +x /home/auravana/app/scripts/elasticsearch/migrations/02_add_retrieved_nodes_into_interaction.sh
                /home/auravana/app/scripts/elasticsearch/migrations/02_add_retrieved_nodes_into_interaction.sh
                chmod +x /home/auravana/app/scripts/elasticsearch/migrations/03_add_telegram_related_data_into_interaction.sh
                /home/auravana/app/scripts/elasticsearch/migrations/03_add_telegram_related_data_into_interaction.sh
            else
                echo "One or more Elasticsearch scripts not found"
                exit 1
            fi
          EOF