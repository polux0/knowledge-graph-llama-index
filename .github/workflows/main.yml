name: Deploy to Digital Ocean

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Create .env file on server
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ secrets.DROPLET_IP_ADDRESS }} << 'EOF'
          cat <<EOT > /home/auravana/app/.env
          HUGGING_FACE_API_KEY=${{ secrets.HUGGING_FACE_API_KEY }}
          NEO4J_DATABASE=${{ secrets.NEO4J_DATABASE }}
          NEO4J_PASSWORD=${{ secrets.NEO4J_PASSWORD }}
          NEO4J_URL=${{ secrets.NEO4J_URL }}
          NEO4J_USERNAME=${{ secrets.NEO4J_USERNAME }}
          EOT
          EOF

      - name: Deploy to Digital Ocean
        run: |
          ssh -v -o StrictHostKeyChecking=no root@${{ secrets.DROPLET_IP_ADDRESS }} << 'EOF'
            export HUGGING_FACE_API_KEY=${{ secrets.HUGGING_FACE_API_KEY }}
            export HUGGING_FACE_API_KEY_ANOTHER=${{ secrets.HUGGING_FACE_API_KEY_ANOTHER }}
            export NEO4J_DATABASE=${{ secrets.NEO4J_DATABASE }}
            export NEO4J_PASSWORD=${{ secrets.NEO4J_PASSWORD }}
            export NEO4J_URL=${{ secrets.NEO4J_URL }}
            export NEO4J_USERNAME=${{ secrets.NEO4J_USERNAME }}
            if [ ! -d "/home/auravana/app" ]; then
              # Clone the repository if the directory doesn't exist
              git clone https://github.com/polux0/knowledge-graph-llama-index /home/auravana/app
            else
              # Pull the latest changes if the repository is already cloned
              cd /home/auravana/app
              git pull
            fi
            cd /home/auravana/app
            docker-compose down && docker-compose up --build -d
          EOF

      - name: Set up Elasticsearch Schema
        run: |
          chmod +x ./scripts/elasticsearch/setup.sh
          ./scripts/elasticsearch/setup.sh
        continue-on-error: true
      
      - name: Create Elasticsearch Snapshot
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ secrets.DROPLET_IP_ADDRESS }} << 'EOF'
          # Wait for Elasticsearch to be ready
          while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://localhost:9200)" != "200" ]]; do sleep 5; done
          # Configure the snapshot repository (if not already configured)
          curl -X PUT "localhost:9200/_snapshot/my_backup_repository" -H 'Content-Type: application/json' -d'
          {
            "type": "fs",
            "settings": {
              "location": "/usr/share/elasticsearch/snapshots"
            }
          }
          '
          # Create a snapshot
          curl -X PUT "localhost:9200/_snapshot/my_backup_repository/snapshot_$(date +%Y%m%d_%H%M%S)?wait_for_completion=true" -H 'Content-Type: application/json' -d'
          {
            "indices": "_all",
            "ignore_unavailable": true,
            "include_global_state": false
          }
          '
          EOF
  